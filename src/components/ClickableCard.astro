---
/*@see https://docs.astro.build/en/guides/client-side-scripts/#pass-frontmatter-variables-to-scripts */
// @ts-ignore generated by typegen
import type { Icon as OneOfIcon } from "virtual:astro-icon";
import Card from './Card.astro';


interface Props {
  href?: string;
  icon?: string | OneOfIcon;
  wrapIcon?: boolean;
  title: string;
  monochrome?: boolean;
  clickable?: boolean;
  colour?: 'purple' | 'orange' | 'green' | 'red' | 'blue';
}

const { href, ...cardProps } = Astro.props;
---
<clickable-card data-href={href}>
    <Card {...cardProps} clickable={true}>{<slot />}</Card>
</clickable-card>

<script>
  class ClickableCard extends HTMLElement {
    constructor() {
      super();

      // Read the message from the data attribute.
      const href = this.dataset.href;
      const card = this.querySelector('article.card');

        card?.addEventListener('click', () => {
          console.log(`Card Clicked ${href}`);
          if (href) {
            window.location.href = href;
          }
      });
    }
  }
  customElements.define('clickable-card', ClickableCard);
</script>

<!--<script>
    /* Note: If U add plain script have multiple <Card> components on a page,
     * Astro will not run the script multiple times. Scripts are bundled and only included once per page. */

    // Find all buttons with the `card-link` class on the page.
    const cards = document.querySelectorAll('article.clickable');

    // Handle clicks on each button.
    cards.forEach((card) => {
    	card.addEventListener('click', () => {
    		console.log('Card was clicked!', card.attributes);
    	});
    });
</script>-->


